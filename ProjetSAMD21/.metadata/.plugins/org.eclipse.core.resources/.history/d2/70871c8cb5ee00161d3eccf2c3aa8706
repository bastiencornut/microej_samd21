/*
 * Java
 *
 * Copyright 2016 IS2T. All rights reserved.
 * Use of this source code is governed by a BSD-style license that can be found at http://www.microej.com/open-source-bsd-license/.
 */
package test;

import ej.microui.MicroUI;
import ej.microui.display.Colors;
import ej.microui.display.Display;
import ej.microui.display.Displayable;
import ej.microui.display.GraphicsContext;
import ej.microui.event.Event;
import ej.microui.event.EventGenerator;
import ej.microui.event.generator.Buttons;
import ej.microui.util.EventHandler;

/**
 * This class shows how to handle touch input events
 */
public class App2 {
	private EventHandlerImpl eventHandler;
	
	/**
	 * Describes the Button event: print the button's id & state.
	 *
	 * @param data
	 *            the Button data
	 */
	private void showButton(int data) {

		String state = null;

		// print its state(s)
		if (Buttons.isPressed(data)) {
			state = "pressed ";
		}
		if (Buttons.isReleased(data)) {
			state = "released ";
		}
		if (Buttons.isRepeated(data)) {
			state = "repeated ";
		}
		if (Buttons.isClicked(data)) {
			state = "clicked ";
		}
		if (Buttons.isDoubleClicked(data)) {
			state = "double-clicked ";
		}

		if (state != null) {
			System.out.print("button\t\t");

			// get the button's id
			int id = Buttons.getButtonID(data);
			System.out.print(id + " ");
			System.out.println(state);
		}
	}

	

	public boolean handleEvent(int event) {
		boolean eventProcessed = false;

		// Gets the event generator.
		final int genId = Event.getGeneratorID(event);
		EventGenerator gen;
		try {
			gen = EventGenerator.get(genId);
		} catch (IndexOutOfBoundsException e) {
			gen = null;
			//message = "unknown event " + event;
		}

		if (gen != null) {
			// Gets the type of event.
			final int type = Event.getType(event);
			int data = Event.getData(event);
			if (Event.BUTTON == type) {
				showButton(data);

				//message = "Bouton : " + nbClicks;
			}		
			eventProcessed = true;
		}

		if (eventProcessed) {
			System.out.println("Gestion event");
		}
		return eventProcessed;
	}

	public static void main(String[] args) {
		// A call to MicroUI.start is required to initialize the graphics
		// runtime environment
		MicroUI.start();
		System.out.println("MicroUI started");
		new App2().start();

	}
	
	public void check() {
		eventHandler = new EventHandlerImpl();

		initializeEventGenerators();

		// ready to run: remember the start time and print a string
		System.out.println();
		System.out.println("=== Ready to check: send an input event... ===");
		System.out.println();
	}
	
	private void initializeEventGenerators() {

		// Get all event generators.
		// Can be specialized as EventGenerator.get(Pointer.class);
		EventGenerator[] generators = EventGenerator.get(EventGenerator.class);
		// set the event handler for each EventGenerator
		for (EventGenerator gen : generators) {
			gen.setEventHandler(eventHandler);
		}
	}


}
